/// <reference types="node" />
export declare function isNonEmptyString(s: unknown): s is string;
export declare type Deferred<T> = {
    resolve: (value?: T) => void;
    reject: (error?: unknown) => void;
    promise: Promise<T>;
};
export declare function mkDeferred<T>(): Deferred<T>;
export declare function genRandom(size: number): Buffer;
export declare function genRandomString(size: number): string;
export declare function sha256(value: Buffer): Buffer;
export declare function encodeBase64(value: Buffer): string;
export declare type Timeout<T> = {
    cancel: () => void;
    promise: Promise<T>;
};
/**
 * Returns a promise that ALWAYS REJECTS after `duration`.
 */
export declare function startTimeout<T = unknown>(duration: number): Timeout<T>;

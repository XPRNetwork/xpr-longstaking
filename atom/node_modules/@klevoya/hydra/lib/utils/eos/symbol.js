"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
/* from @deltalabs/eos-util */
const long_1 = tslib_1.__importDefault(require("long"));
const util_1 = require("util");
const name_1 = require("./name");
const textEncoder = new util_1.TextEncoder();
const textDecoder = new util_1.TextDecoder();
// https://github.com/EOSIO/eosjs/blob/master/src/eosjs-serialize.ts#L386-L420
exports.convertSymbolCode2Raw = (symbolCode) => {
    if (typeof symbolCode !== `string`) {
        throw new TypeError(`Expected string containing symbol_code`);
    }
    const a = [];
    a.push(...textEncoder.encode(symbolCode));
    while (a.length < 8) {
        a.push(0);
    }
    const symbolCodeValue = long_1.default.fromBytesLE(a, true);
    return symbolCodeValue;
};
exports.convertRaw2SymbolCode = (value) => {
    let bytes = value.toBytesLE();
    const stringTerminationIndex = bytes.findIndex(b => b === 0);
    if (stringTerminationIndex >= 0) {
        bytes = bytes.slice(0, stringTerminationIndex);
    }
    const name = textDecoder.decode(new Uint8Array(bytes));
    return name;
};
exports.convertSymbolCode2Name = (symbolCode) => {
    const val = exports.convertSymbolCode2Raw(symbolCode);
    return name_1.convertValue2NameSerialized(val);
};
exports.convertName2SymbolCode = (encodedSymbolName) => {
    const raw = name_1.convertName2ValueSerialized(encodedSymbolName);
    return exports.convertRaw2SymbolCode(raw);
};

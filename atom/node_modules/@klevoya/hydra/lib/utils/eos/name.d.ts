import Long from "long";
/**
 * Encodes a value the same way eosjs (de-)serializes names
 * eosjs name (de-)serialization of names is different from the one that EOSIO uses
 * https://github.com/EOSIO/eosjs/blob/849c03992e6ce3cb4b6a11bf18ab17b62136e5c9/src/eosjs-serialize.ts#L340-L363
 */
declare function convertValue2NameSerialized(symbolRaw: Long): string;
/**
 * Encodes a value the same way eosjs (de-)serializes names
 * eosjs name (de-)serialization of names is different from the one that EOSIO uses
 * https://github.com/EOSIO/eosjs/blob/849c03992e6ce3cb4b6a11bf18ab17b62136e5c9/src/eosjs-serialize.ts#L340-L363
 */
declare function convertName2ValueSerialized(name: string): Long.Long;
declare function convertName2Value(name: string, littleEndian?: boolean): Long;
declare function convertValue2Name(value: Long | number | string): string;
declare function getTableBoundsForNameAsValue(name: string): {
    lower_bound: string;
    upper_bound: string;
};
declare function getTableBoundsForName(name: string): {
    lower_bound: string;
    upper_bound: string;
};
declare function isName(str: string): boolean;
export { isName, convertName2Value, convertValue2Name, convertName2ValueSerialized, convertValue2NameSerialized, getTableBoundsForName, getTableBoundsForNameAsValue, };

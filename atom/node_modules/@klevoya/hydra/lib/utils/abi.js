"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const getPrimitiveDefaultValue = (primitiveName) => {
    let isArray = false;
    if (primitiveName.endsWith(`[]`)) {
        isArray = true;
        primitiveName = primitiveName.replace(`[]`, ``);
    }
    let val = `${primitiveName}`; // default to the name
    if (/^(int|uint|varint|varuint|float)(\d+)$/.test(primitiveName)) {
        const matches = /^(int|uint|varint|varuint|float)(\d+)$/.exec(primitiveName);
        if (matches && matches[2]) {
            const number = Number.parseInt(matches[2], 10);
            if (number <= 32) {
                val = 123;
            }
            else {
                val = `123456`;
            }
        }
    }
    else if (primitiveName === `name`) {
        val = `user1`;
    }
    else if (primitiveName === `bool`) {
        val = true;
    }
    else if (primitiveName === `symbol`) {
        val = `4,EOS`;
    }
    else if (primitiveName === `symbol_code`) {
        val = `EOS`;
    }
    else if (primitiveName === `asset`) {
        val = `1.2345 EOS`;
    }
    else if (/^time_point/i.test(primitiveName)) {
        val = `2000-01-04T00:00:00.000`;
    }
    else if (primitiveName === `checksum160`) {
        val = `B37F8E71E88634189E2246EB806DA204E3C7ACED`;
    }
    else if (primitiveName === `checksum256`) {
        val = `B37F8E71E88634189E2246EB806DA204E3C7ACED831C4DEA10272267431C8BD1`;
    }
    else if (primitiveName === `checksum512`) {
        val = `B37F8E71E88634189E2246EB806DA204E3C7ACED831C4DEA10272267431C8BD1B37F8E71E88634189E2246EB806DA204E3C7ACED831C4DEA10272267431C8BD1`;
    }
    return isArray ? [val] : val;
};
const createStruct = (abi, structName) => {
    const structDef = abi.structs.find(s => s.name === structName);
    if (!structDef)
        return getPrimitiveDefaultValue(structName);
    return structDef.fields.reduce((acc, field) => (Object.assign(Object.assign({}, acc), { [field.name]: createStruct(abi, field.type) })), {});
};
exports.createEmptyTableStruct = (abi, tableName) => {
    const tableDef = abi.tables.find(t => t.name === tableName);
    if (!tableDef)
        throw new Error(`Table "${tableName}" does not exist in ABI`);
    return createStruct(abi, tableDef.type);
};
exports.createEmptyActionPayload = (abi, actionName) => {
    const actionDef = abi.actions.find(t => t.name === actionName);
    if (!actionDef)
        throw new Error(`Action "${actionName}" does not exist in ABI`);
    return createStruct(abi, actionDef.type);
};

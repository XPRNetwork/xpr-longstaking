import { Action } from "eosjs/dist/eosjs-serialize";
import { Dictionary } from 'lodash';
export interface TAbi {
    version: string;
    types: Array<{
        new_type_name: string;
        type: string;
    }>;
    structs: Array<{
        name: string;
        base: string;
        fields: Array<{
            name: string;
            type: string;
        }>;
    }>;
    actions: Array<{
        name: string;
        type: string;
        ricardian_contract: string;
    }>;
    tables: Array<{
        name: string;
        type: string;
        index_type: string;
        key_names: string[];
        key_types: string[];
    }>;
    ricardian_clauses: Array<{
        id: string;
        body: string;
    }>;
    error_messages: Array<{
        error_code: string;
        error_msg: string;
    }>;
    abi_extensions: Array<{
        tag: number;
        value: string;
    }>;
    variants?: Array<{
        name: string;
        types: string[];
    }>;
}
export declare type TTransaction = {
    actions: Action[];
};
export declare type TTransactionTrace = {
    id: string;
    block_num: number;
    block_time: string;
    elapsed: number;
    net_usage: number;
    scheduled: boolean;
    action_traces: TActionTrace[];
    failed_dtrx_trace: any;
};
declare type TActionTrace = {
    action_ordinal: number;
    creator_action_ordinal: number;
    closest_unnotified_ancestor_action_ordinal: number;
    receipt: {
        receiver: string;
        act_digest: string;
        global_sequence: string;
        recv_sequence: string;
        auth_sequence: [string, number][];
        code_sequence: string;
        abi_sequence: number;
    };
    receiver: string;
    act: {
        account: string;
        name: string;
        authorization: {
            actor: string;
            permission: string;
        }[];
        data: string;
    };
    context_free: boolean;
    elapsed: number;
    console: string;
    trx_id: string;
    block_num: number;
    block_time: string;
    account_ram_deltas: any[];
};
export declare type TAuthority = {
    threshold: number;
    keys: {
        key: string;
        weight: number;
    }[];
    accounts: {
        permission: {
            actor: string;
            permission: string;
        };
        weight: number;
    }[];
    waits: {
        wait_sec: number;
        weight: number;
    }[];
};
export declare type TContractsTableScoped = Dictionary<any[]>;
export {};

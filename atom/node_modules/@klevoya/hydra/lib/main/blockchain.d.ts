import { THydraConfig } from "../config/hydra";
import Contract from "./contract";
import { TTransaction, TAuthority, TContractsTableScoped, TTransactionTrace } from "../types";
import Account from "./account";
import { PROTOCOL_FEATURES } from "./snapshot/section-serializers/protocol-state-object-section";
export default class Blockchain {
    private _contracts;
    private _accounts;
    private _snapshot;
    private _api;
    /**
     * Creates a new blockchain object
     */
    constructor(config: THydraConfig);
    private _addDefaultContractTemplates;
    private _createInitialSnapshot;
    /**
     * Gets configured contract templates that can be used for setContract.
     */
    get contractTemplates(): {
        [x: string]: Contract<any>;
    };
    /**
     * Gets all user-created and default-created accounts. Keyed by account name
     */
    get accounts(): {
        [x: string]: Account;
    };
    getTableRowsScoped(accountName: string, tableName: string): TContractsTableScoped;
    /**
     * Creates a new account
     */
    createAccount(accountName: string, ownerAuth?: TAuthority, activeAuth?: TAuthority): Account;
    updateAuth(accountName: string, permissionName: string, parentPermissionName: string, auth: Partial<TAuthority>): Account;
    setContract(accountName: string, contract: Contract<any>): Account;
    resetTables(accountName: string, ...tableNames: string[]): void;
    private getJsonFixtures;
    /**
     * Loads initial contract data defined for the currently deployed contract on the account.
     * If only accountName is defined, it loads the data from the JSON fixture files.
     * If tableName and fixtureScopeRowsMap are also defined, it will load the table data given by the fixtureScopeRowsMap argument
     */
    loadFixtures(accountName: string, tableName?: string, fixtureScopeRowsMap?: {
        [key: string]: any[];
    }): Promise<void>;
    /**
     * Executes a transactions
     */
    sendTransaction: (transaction: TTransaction) => Promise<TTransactionTrace>;
    /**
     * Sets the current time of the blockchain changing the value returned
     * by eosio::current_time_point and similar intrinsics
     */
    setCurrentTime: (date: Date) => void;
    /**
     * Gets all deferred transactions
     */
    getDeferredTransactions(): ({
        expiration: string;
        ref_block_num: number;
        ref_block_prefix: number;
        max_net_usage_words: number;
        max_cpu_usage_ms: number;
        delay_sec: number;
        context_free_actions: any[];
        actions: import("eosjs/dist/eosjs-serialize").Action[];
        transaction_extensions: any[];
    } & Pick<import("./snapshot/section-serializers/generated-transaction-object-section").TGeneratedTransactionObject, "payer" | "sender" | "sender_id">)[];
    /**
     * Clears all deferred transactions
     */
    clearDeferredTransactions(): void;
    /**
     * Enable or disable an EOSIO protocol feature
     */
    setProtocolFeature(featureName: keyof typeof PROTOCOL_FEATURES, enable: boolean): void;
    private _onPostTransaction;
    private _updateAccounts;
}

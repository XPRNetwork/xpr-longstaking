/// <reference types="node" />
import { TContractObject } from "../config/hydra";
import { TAbi, TTransactionTrace } from "../types";
import Blockchain from "./blockchain";
declare type TExtractActionsFromAbi<T extends TAbi> = any;
declare type TContract<T extends TAbi> = TExtractActionsFromAbi<T> & {
    bla: number;
};
export default class Contract<T extends TAbi> implements TContract<T> {
    private blockchain;
    config: TContractObject;
    abi: TAbi;
    wasm: Buffer;
    codeHash: string;
    constructor(blockchain: Blockchain, contract: TContractObject);
    private loadConfig;
    _createContractObject(accountName: string): {
        [key: string]: (data?: any, authorization?: import("eosjs/dist/eosjs-serialize").Authorization[] | undefined) => Promise<TTransactionTrace>;
    };
    static __createContractObject(accountName: string, abi: TAbi, blockchain: Blockchain): {
        [key: string]: (data?: any, authorization?: import("eosjs/dist/eosjs-serialize").Authorization[] | undefined) => Promise<TTransactionTrace>;
    };
}
export {};

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const path = tslib_1.__importStar(require("path"));
const fs = tslib_1.__importStar(require("fs-extra"));
const jwt_decode_1 = tslib_1.__importDefault(require("jwt-decode"));
const hydra_1 = require("../config/hydra");
exports.auth0Config = {
    auth0ClientId: `pNxGegVeVKv57gcww6RaX71yMzwpVdeV`,
    auth0Domain: `klevoya.eu.auth0.com`,
    // audience = API identifier configured in Auth0
    auth0TokenAudience: `https://hydra.klevoya.com`,
};
exports.getStoredAuth = () => {
    let content = process.env.HYDRA_AUTH;
    let from = `HYDRA_AUTH environment variable`;
    if (!content) {
        const settingsDir = hydra_1.getSettingsDirectory();
        const settingsFilePath = path.resolve(settingsDir, `auth.json`);
        if (!fs.existsSync(settingsFilePath))
            throw new Error(`Please run 'hydra login' first to authenticate.`);
        content = fs.readFileSync(settingsFilePath, `utf8`);
        from = `settings`;
    }
    try {
        const parsedSettings = JSON.parse(content);
        if (!parsedSettings.access_token)
            throw new Error(`No access-token found in ${from}. Please run 'hydra login'.`);
        if (!parsedSettings.refresh_token)
            throw new Error(`No refresh-token found in ${from}. Please run 'hydra login'.`);
        return parsedSettings;
    }
    catch (_a) {
        throw new Error(`No auth tokens found in ${from}. Please run 'hydra login'.`);
    }
};
exports.refreshAccessToken = async () => {
    const auth = exports.getStoredAuth();
    const accessToken = auth.access_token;
    const decodedAccessToken = jwt_decode_1.default(accessToken);
    const expiry = new Date(Number.parseInt(decodedAccessToken.exp, 10) * 1000);
    if (expiry.getTime() > Date.now()) {
        return accessToken;
    }
    const requestParams = {
        headers: { "content-type": `application/x-www-form-urlencoded` },
        form: {
            grant_type: `refresh_token`,
            client_id: exports.auth0Config.auth0ClientId,
            refresh_token: auth.refresh_token,
        },
    };
    const params = new URLSearchParams();
    Object.entries(requestParams.form).forEach(([key, value]) => {
        params.append(key, value);
    });
    const response = await axios_1.default.post(`https://${exports.auth0Config.auth0Domain}/oauth/token`, params, { headers: requestParams.headers });
    auth.access_token = response.data.access_token;
    fs.writeFileSync(hydra_1.getSettingsFilePath(), JSON.stringify(auth), `utf8`);
    return response.data.access_token;
};

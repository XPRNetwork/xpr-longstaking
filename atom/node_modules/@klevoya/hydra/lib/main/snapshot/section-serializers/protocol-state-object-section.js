"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const buffer_1 = require("../serializer/buffer");
const abstract_section_1 = tslib_1.__importDefault(require("./abstract-section"));
const DEFAULT_ACTIVATED_PROTOCOL_FEATURES = {
    PREACTIVATE_FEATURE: `0ec7e080177b2c02b278d5088611686b49d739925a92d9bfcacd7fc6b74053bd`,
    ONLY_BILL_FIRST_AUTHORIZER: `8ba52fe7a3956c5cd3a656a3174b931d3bb2abb45578befc59f283ecd816a405`,
    DISALLOW_EMPTY_PRODUCER_SCHEDULE: `68dcaa34c0517d19666e6b33add67351d8c5f69e999ca1e37931bc410a297428`,
    ONLY_LINK_TO_EXISTING_PERMISSION: `1a99a59d87e06e09ec5b028a9cbb7749b4a5ad8819004365d02dc4379a8b7241`,
    FIX_LINKAUTH_RESTRICTION: `e0fb64b1085cc5538970158d05a009c24e276fb94e1a0bf6a528b48fbc4ff526`,
    RAM_RESTRICTIONS: `4e7bf348da00a945489b2a681749eb56f5de00b900014e137ddae39f48f69d67`,
};
exports.PROTOCOL_FEATURES = Object.assign(Object.assign({}, DEFAULT_ACTIVATED_PROTOCOL_FEATURES), { 
    // other ones
    REPLACE_DEFERRED: `ef43112c6543b88db2283a2e077278c315ae2c84719a8b25f25cc88565fbea99`, NO_DUPLICATE_DEFERRED_ID: `4a90c00d55454dc5b059055ca213579c6ea856967712a56017487886a4d4cc0f`, RESTRICT_ACTION_TO_SELF: `ad9e3d8f650687709fd68f4b90b41f7d825a365b02c23a636cef88ac2ac00c43`, FORWARD_SETCODE: `2652f5f96006294109b3dd0bbde63693f55324af452b799ee137a81a905eed25`, GET_SENDER: `f0af56d2c5a48d60a4a5b5c903edfb7db3a736a94ed589d0b797df33ff9d3e1d`, WEBAUTHN_KEY: `4fca8bd82bbd181e714e283f83e1b45d95ca5af40fb89ad3977b653c448f78c2`, WTMSIG_BLOCK_SIGNATURES: `299dcb6af692324b899b39f16d5a530a33062804e41f09dc97e9f156b4476707` });
exports.defaultProtocolStateObject = {
    activated_protocol_features: Object.values(DEFAULT_ACTIVATED_PROTOCOL_FEATURES).map(digest => ({
        feature_digest: digest,
        activation_block_num: 0,
    })),
    preactivated_protocol_features: [],
    whitelisted_intrinsics: [
        `__addtf3`,
        `__ashlti3`,
        `__ashrti3`,
        `__cmptf2`,
        `__divtf3`,
        `__divti3`,
        `__eqtf2`,
        `__extenddftf2`,
        `__extendsftf2`,
        `__fixdfti`,
        `__fixsfti`,
        `__fixtfdi`,
        `__fixtfsi`,
        `__fixtfti`,
        `__fixunsdfti`,
        `__fixunssfti`,
        `__fixunstfdi`,
        `__fixunstfsi`,
        `__fixunstfti`,
        `__floatditf`,
        `__floatsidf`,
        `__floatsitf`,
        `__floattidf`,
        `__floatunditf`,
        `__floatunsitf`,
        `__floatuntidf`,
        `__getf2`,
        `__gttf2`,
        `__letf2`,
        `__lshlti3`,
        `__lshrti3`,
        `__lttf2`,
        `__modti3`,
        `__multf3`,
        `__multi3`,
        `__negtf2`,
        `__netf2`,
        `__subtf3`,
        `__trunctfdf2`,
        `__trunctfsf2`,
        `__udivti3`,
        `__umodti3`,
        `__unordtf2`,
        `abort`,
        `action_data_size`,
        `activate_feature`,
        `assert_recover_key`,
        `assert_ripemd160`,
        `assert_sha1`,
        `assert_sha256`,
        `assert_sha512`,
        `cancel_deferred`,
        `check_permission_authorization`,
        `check_transaction_authorization`,
        `current_receiver`,
        `current_time`,
        `db_end_i64`,
        `db_find_i64`,
        `db_get_i64`,
        `db_idx128_end`,
        `db_idx128_find_primary`,
        `db_idx128_find_secondary`,
        `db_idx128_lowerbound`,
        `db_idx128_next`,
        `db_idx128_previous`,
        `db_idx128_remove`,
        `db_idx128_store`,
        `db_idx128_update`,
        `db_idx128_upperbound`,
        `db_idx256_end`,
        `db_idx256_find_primary`,
        `db_idx256_find_secondary`,
        `db_idx256_lowerbound`,
        `db_idx256_next`,
        `db_idx256_previous`,
        `db_idx256_remove`,
        `db_idx256_store`,
        `db_idx256_update`,
        `db_idx256_upperbound`,
        `db_idx64_end`,
        `db_idx64_find_primary`,
        `db_idx64_find_secondary`,
        `db_idx64_lowerbound`,
        `db_idx64_next`,
        `db_idx64_previous`,
        `db_idx64_remove`,
        `db_idx64_store`,
        `db_idx64_update`,
        `db_idx64_upperbound`,
        `db_idx_double_end`,
        `db_idx_double_find_primary`,
        `db_idx_double_find_secondary`,
        `db_idx_double_lowerbound`,
        `db_idx_double_next`,
        `db_idx_double_previous`,
        `db_idx_double_remove`,
        `db_idx_double_store`,
        `db_idx_double_update`,
        `db_idx_double_upperbound`,
        `db_idx_long_double_end`,
        `db_idx_long_double_find_primary`,
        `db_idx_long_double_find_secondary`,
        `db_idx_long_double_lowerbound`,
        `db_idx_long_double_next`,
        `db_idx_long_double_previous`,
        `db_idx_long_double_remove`,
        `db_idx_long_double_store`,
        `db_idx_long_double_update`,
        `db_idx_long_double_upperbound`,
        `db_lowerbound_i64`,
        `db_next_i64`,
        `db_previous_i64`,
        `db_remove_i64`,
        `db_store_i64`,
        `db_update_i64`,
        `db_upperbound_i64`,
        `eosio_assert`,
        `eosio_assert_code`,
        `eosio_assert_message`,
        `eosio_exit`,
        `expiration`,
        `get_account_creation_time`,
        `get_action`,
        `get_active_producers`,
        `get_blockchain_parameters_packed`,
        `get_context_free_data`,
        `get_permission_last_used`,
        `get_resource_limits`,
        `has_auth`,
        `is_account`,
        `is_feature_active`,
        `is_privileged`,
        `memcmp`,
        `memcpy`,
        `memmove`,
        `memset`,
        `printdf`,
        `printhex`,
        `printi`,
        `printi128`,
        `printn`,
        `printqf`,
        `prints`,
        `prints_l`,
        `printsf`,
        `printui`,
        `printui128`,
        `publication_time`,
        `read_action_data`,
        `read_transaction`,
        `recover_key`,
        `require_auth`,
        `require_auth2`,
        `require_recipient`,
        `ripemd160`,
        `send_context_free_inline`,
        `send_deferred`,
        `send_inline`,
        `set_blockchain_parameters_packed`,
        `set_privileged`,
        `set_proposed_producers`,
        `set_resource_limits`,
        `sha1`,
        `sha256`,
        `sha512`,
        `tapos_block_num`,
        `tapos_block_prefix`,
        `transaction_size`,
    ],
    num_supported_key_types: 2,
};
class ProtocolStateObjectSerializer extends abstract_section_1.default {
    constructor(buf, rowCount, sectionName) {
        super(buf, rowCount, sectionName);
        this.deserialize();
    }
    deserialize() {
        const data = [];
        while (this.hasMoreRows()) {
            const row = this.readRow(`protocol_state_object`);
            data.push(row);
        }
        this.data = data;
    }
    serialize() {
        const rows = this.data || [];
        const rowCount = rows.length;
        const buf = buffer_1.createSerialBuffer();
        this.serializeHeader(buf, rowCount);
        for (const row of rows) {
            this.serializeRow(buf, `protocol_state_object`, row);
        }
        return Buffer.from(buf.asUint8Array());
    }
    printData() {
        // ignore whitelisted intrinsics
        const rows = this.data.map(row => ({
            activated_protocol_features: row.activated_protocol_features,
            preactivated_protocol_features: row.preactivated_protocol_features,
            num_supported_key_types: row.num_supported_key_types,
        }));
        return JSON.stringify({ rows, rowsLength: this.data.length }, null, 2);
    }
}
exports.default = ProtocolStateObjectSerializer;

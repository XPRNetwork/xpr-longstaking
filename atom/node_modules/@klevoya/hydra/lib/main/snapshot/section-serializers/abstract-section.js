"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const serialized_types_1 = tslib_1.__importDefault(require("../serializer/serialized-types"));
class SectionSerializer {
    constructor(buf, rowCount, sectionName) {
        this.buf = buf;
        this.rowCount = rowCount;
        this.sectionName = sectionName;
        this.curRow = 0;
        // may not call deserialize here as 'this' will be bound to base class
        // this.deserialize()
    }
    readRow(typeName) {
        const type = serialized_types_1.default.get(typeName);
        if (!type)
            throw new Error(`Error in SectionSerializer::readRow: Tried to read unknown type "${typeName}"`);
        const row = type.deserialize(this.buf);
        this.curRow++;
        return row;
    }
    serializeRow(buf, typeName, rowData) {
        const type = serialized_types_1.default.get(typeName);
        if (!type)
            throw new Error(`Error in SectionSerializer::serializeRow: Tried to read unknown type "${typeName}"`);
        type.serialize(buf, rowData);
    }
    hasMoreRows() {
        return this.curRow < this.rowCount;
    }
    isAtEndOfBuffer() {
        return this.buf.readPos === this.buf.length;
    }
    printData() {
        return JSON.stringify(this.data, null, 2);
    }
    serializeHeader(buf, rowCount) {
        buf.pushNumberAsUint64(rowCount);
        buf.pushCString(this.sectionName);
    }
}
exports.default = SectionSerializer;

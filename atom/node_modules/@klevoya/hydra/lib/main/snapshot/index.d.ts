/// <reference types="node" />
import * as _ from "lodash";
import { TAuthority } from "../../types";
import { TAccountMetadataObject } from "./section-serializers/account-metadata-object-section";
import { TAccountObject } from "./section-serializers/account-object-section";
import { PROTOCOL_FEATURES } from "./section-serializers/protocol-state-object-section";
export default class Snapshot {
    private snapshot;
    private sections;
    constructor();
    private initializeSections;
    set(snapshot: Buffer): void;
    private parseSnapshot;
    serializeSnapshot(): Buffer;
    print(): void;
    writeSnapshot(): void;
    createAccount(accountName: string, ownerAuth: TAuthority, activeAuth: TAuthority, options?: {
        privileged: boolean;
    }): void;
    updateAccountAuth(accountName: string, permissionName: string, parentPermissionName: string, auth: TAuthority): void;
    setAccountCodeAbi(accountName: string, abi?: any, wasm?: Buffer): void;
    resetTables(accountName: string, ...tableNames: string[]): void;
    getTableRowsScoped(accountName: string, tableName: string): _.Dictionary<any[]>;
    getAccountsInfo(): _.Dictionary<TAccountMetadataObject & TAccountObject>;
    getDeferredTransactions(): ({
        expiration: string;
        ref_block_num: number;
        ref_block_prefix: number;
        max_net_usage_words: number;
        max_cpu_usage_ms: number;
        delay_sec: number;
        context_free_actions: any[];
        actions: import("eosjs/dist/eosjs-serialize").Action[];
        transaction_extensions: any[];
    } & Pick<import("./section-serializers/generated-transaction-object-section").TGeneratedTransactionObject, "payer" | "sender" | "sender_id">)[];
    clearDeferredTransactions(): void;
    setProtocolFeature(featureName: keyof typeof PROTOCOL_FEATURES, enable: boolean): void;
    setCurrentTime(date: Date): void;
    private getSectionSerializer;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const eosjs_serialize_1 = require("eosjs/dist/eosjs-serialize");
const buffer_1 = require("./buffer");
const variant_1 = tslib_1.__importDefault(require("./variant"));
const eosio_abi_json_1 = tslib_1.__importDefault(require("./eosio.abi.json"));
const abi_abi_json_1 = tslib_1.__importDefault(require("./abi.abi.json"));
const eosioAbi = eosio_abi_json_1.default;
const abiAbi = abi_abi_json_1.default;
function createType(attrs) {
    return Object.assign({ name: `<missing name>`, aliasOfName: ``, arrayOf: null, optionalOf: null, extensionOf: null, baseName: ``, base: null, fields: [], serialize: () => {
            throw new Error(`Don't know how to serialize type`);
        }, deserialize: () => {
            throw new Error(`Don't know how to deserialize type`);
        } }, attrs);
}
exports.createTypeSerializer = (abi = eosioAbi) => {
    let types = eosjs_serialize_1.createInitialTypes();
    types.set(`binarystring`, createType({
        name: `binarystring`,
        serialize(buffer, data) {
            const binaryString = Buffer.from(data, `binary`);
            buffer.pushBytes(binaryString);
        },
        deserialize(buffer) {
            const bytes = buffer.getBytes();
            return Buffer.from(bytes).toString(`binary`);
        },
    }));
    // eos/libraries/fc/include/fc/io/raw_variant.hpp
    types.set(`variant_object`, createType(Object.assign({ name: `variant_object` }, variant_1.default)));
    types = eosjs_serialize_1.getTypesFromAbi(types, abi);
    return types;
};
exports.jsonToRawAbi = (json) => {
    const buf = buffer_1.createSerialBuffer();
    const abiTypes = exports.createTypeSerializer(abiAbi);
    const abiDefinition = abiTypes.get(`abi_def`);
    // need to make sure abi has every field in abiDefinition.fields
    // otherwise serialize throws
    const jsonExtended = abiDefinition.fields.reduce((acc, { name: fieldName }) => Object.assign(acc, { [fieldName]: acc[fieldName] || [] }), json);
    abiDefinition.serialize(buf, jsonExtended);
    // convert to node buffer
    return Buffer.from(buf.asUint8Array());
};
exports.rawAbiToJson = (rawAbi) => {
    if (!rawAbi)
        return {};
    const buf = buffer_1.createSerialBuffer(Buffer.from(rawAbi, `binary`));
    const abiTypes = exports.createTypeSerializer(abiAbi);
    const abiDefinition = abiTypes.get(`abi_def`);
    const abi = abiDefinition.deserialize(buf);
    return abi;
};
const serializedTypes = exports.createTypeSerializer();
exports.default = serializedTypes;

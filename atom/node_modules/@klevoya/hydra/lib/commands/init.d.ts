import { Command, flags } from "@oclif/command";
import * as _ from "lodash";
import { TContractsMap, TAbiMap } from "../config/hydra";
export default class Init extends Command {
    configDir: string;
    configFilePath: string;
    static description: string;
    static examples: string[];
    static flags: {
        "contracts-dir": flags.IOptionFlag<string>;
        typescript: import("@oclif/parser/lib/flags").IBooleanFlag<boolean>;
    };
    static args: never[];
    relativeToConfig: (p: string) => string;
    pathFromConfig: (p: string) => string;
    getContracts(contractsDir: string): Promise<TContractsMap>;
    getAbis(contracts: TContractsMap): Promise<TAbiMap>;
    getTables(abiMap: TAbiMap): Promise<_.Dictionary<any[]>>;
    bootstrapFixtures(fixturesDir: string, abiMap: TAbiMap, tablesToBootstrap: _.Dictionary<string[]>): Promise<string[]>;
    bootstrapTest(contracts: TContractsMap, abiMap: TAbiMap, testsDir: string, asTypeScript: boolean): Promise<void>;
    writeConfig(contracts: TContractsMap): Promise<void>;
    writeHydraHeaderFile(testsDir: string): Promise<void>;
    initPackageWithTestEnvironment(contracts: TContractsMap): Promise<void>;
    run(): Promise<void>;
}

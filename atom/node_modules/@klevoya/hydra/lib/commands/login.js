"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const path = tslib_1.__importStar(require("path"));
const fs = tslib_1.__importStar(require("fs-extra"));
const cli_login_auth0_1 = require("@altostra/cli-login-auth0");
const hydra_1 = require("../config/hydra");
const auth_1 = require("../main/auth");
class Login extends command_1.Command {
    async run() {
        const { args, flags } = this.parse(Login);
        try {
            // to get the user metadata field we need to add it as a rule to the token
            // https://auth0.com/docs/api-auth/tutorials/adoption/scope-custom-claims
            const sut = new cli_login_auth0_1.Auth0LoginProcessor(Object.assign(Object.assign({}, auth_1.auth0Config), { 
                // offline_access for refresh token
                auth0TokenScope: `profile email user_metadata offline_access`, port: 42427, timeout: 120 * 1e3, successfulLoginHtmlFile: path.resolve(__dirname, `../templates/login-success.html`), failedLoginHtmlFile: path.resolve(__dirname, `../templates/login-failure.html`) }));
            const auth = await sut.runLoginProcess();
            const settingsDir = hydra_1.getSettingsDirectory();
            fs.ensureDirSync(settingsDir);
            const settingsFilePath = path.resolve(settingsDir, `auth.json`);
            fs.writeFileSync(settingsFilePath, JSON.stringify({
                access_token: auth.access_token,
                refresh_token: auth.refresh_token,
                scope: auth.scope,
            }), `utf8`);
            this.log(`Login successful`);
        }
        catch (error) {
            this.error(error.message);
        }
    }
}
exports.default = Login;
Login.description = `Authenticate with hydra`;
Login.examples = [
    `$ hydra login`,
];
Login.flags = {};
Login.args = [];

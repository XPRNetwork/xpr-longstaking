"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const yaml = tslib_1.__importStar(require("js-yaml"));
const fs = tslib_1.__importStar(require("fs"));
const path = tslib_1.__importStar(require("path"));
const os = tslib_1.__importStar(require("os"));
const defaults_1 = tslib_1.__importDefault(require("lodash/defaults"));
const defaultOptions = {
    serverBaseUrl: `https://api-hydra.klevoya.com`,
    skipAuth: false,
};
exports.getSettingsDirectory = () => {
    return path.resolve(os.homedir(), `.hydra`);
};
exports.getSettingsFilePath = () => {
    const settingsDir = exports.getSettingsDirectory();
    const settingsFilePath = path.resolve(settingsDir, `auth.json`);
    return settingsFilePath;
};
exports.createHydraConfig = async ({ contracts, }) => {
    return { contracts: contracts, options: null };
};
exports.loadConfig = (configPath) => {
    if (!fs.existsSync(configPath)) {
        throw new Error(`Config file was not found in "${path.resolve(configPath)}"`);
    }
    const configContent = fs.readFileSync(configPath, `utf8`);
    const config = yaml.safeLoad(configContent);
    if (!config.contracts)
        throw new Error(`No contracts defined in config`);
    const configDir = path.dirname(configPath);
    Object.values(config.contracts).forEach(contractObj => {
        // create absolute paths
        contractObj.abi = path.resolve(configDir, contractObj.abi);
        contractObj.wasm = path.resolve(configDir, contractObj.wasm);
    });
    config.options = defaults_1.default({}, config.options || {}, defaultOptions);
    return config;
};
